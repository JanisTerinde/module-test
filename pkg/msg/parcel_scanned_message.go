// Code generated by go-swagger; DO NOT EDIT.

package msg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParcelScannedMessage parcel scanned message
//
// swagger:model ParcelScannedMessage
type ParcelScannedMessage struct {

	// detail
	// Required: true
	Detail *ParcelScannedMessageDetail `json:"detail"`

	// detail type
	// Required: true
	DetailType *string `json:"detail-type"`

	// id
	// Required: true
	// Format: uuid4
	ID *strfmt.UUID4 `json:"id"`

	// source
	// Required: true
	Source *string `json:"source"`

	// time
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this parcel scanned message
func (m *ParcelScannedMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParcelScannedMessage) validateDetail(formats strfmt.Registry) error {

	if err := validate.Required("detail", "body", m.Detail); err != nil {
		return err
	}

	if m.Detail != nil {
		if err := m.Detail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detail")
			}
			return err
		}
	}

	return nil
}

func (m *ParcelScannedMessage) validateDetailType(formats strfmt.Registry) error {

	if err := validate.Required("detail-type", "body", m.DetailType); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid4", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessage) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessage) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this parcel scanned message based on the context it is used
func (m *ParcelScannedMessage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParcelScannedMessage) contextValidateDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.Detail != nil {
		if err := m.Detail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParcelScannedMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParcelScannedMessage) UnmarshalBinary(b []byte) error {
	var res ParcelScannedMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ParcelScannedMessageDetail parcel scanned message detail
//
// swagger:model ParcelScannedMessageDetail
type ParcelScannedMessageDetail struct {

	// location
	// Required: true
	Location *string `json:"location"`

	// parcel id
	// Required: true
	ParcelID *string `json:"parcel_id"`

	// time
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`
}

// Validate validates this parcel scanned message detail
func (m *ParcelScannedMessageDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParcelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParcelScannedMessageDetail) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("detail"+"."+"location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessageDetail) validateParcelID(formats strfmt.Registry) error {

	if err := validate.Required("detail"+"."+"parcel_id", "body", m.ParcelID); err != nil {
		return err
	}

	return nil
}

func (m *ParcelScannedMessageDetail) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("detail"+"."+"time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("detail"+"."+"time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this parcel scanned message detail based on context it is used
func (m *ParcelScannedMessageDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParcelScannedMessageDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParcelScannedMessageDetail) UnmarshalBinary(b []byte) error {
	var res ParcelScannedMessageDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
